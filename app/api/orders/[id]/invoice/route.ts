import { auth } from '@/lib/auth';
import Order from '@/lib/models/Order';
import connectDB from '@/lib/mongodb';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    await connectDB();
    
    const { id } = await context.params;
    
    // Validate if the ID is a valid MongoDB ObjectId
    if (!id || !id.match(/^[0-9a-fA-F]{24}$/)) {
      return NextResponse.json({ error: 'Invalid order ID' }, { status: 400 });
    }

    // Get the order
    const order = await Order.findById(id)
      .populate('customer', 'firstName lastName email phone')
      .lean() as any;
    
    if (!order) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }

    // Check if user has access to this order
    const session = await auth();
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Allow access if user owns the order or is admin
    const isOwner = order.customer && (order.customer as any)._id.toString() === session.user.id;
    const isAdmin = ['admin', 'manager', 'staff'].includes((session.user as any).role);
    
    if (!isOwner && !isAdmin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Check if invoice exists
    if (!order.invoicePath) {
      return NextResponse.json({ 
        error: 'Invoice not yet generated',
        message: 'Invoice is being generated by our system. Please try again in a few minutes.'
      }, { status: 404 });
    }

    // For now, return the invoice path
    // In a full implementation, you would serve the actual file
    return NextResponse.json({
      invoicePath: order.invoicePath,
      orderNumber: order.orderNumber,
      message: 'Invoice found'
    });

  } catch (error) {
    console.error('Get invoice error:', error);
    return NextResponse.json({ error: 'Failed to fetch invoice' }, { status: 500 });
  }
}

export async function POST(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    await connectDB();
    
    const { id } = await context.params;
    
    // Validate if the ID is a valid MongoDB ObjectId
    if (!id || !id.match(/^[0-9a-fA-F]{24}$/)) {
      return NextResponse.json({ error: 'Invalid order ID' }, { status: 400 });
    }

    // Get the order
    const order = await Order.findById(id)
      .populate('customer', 'firstName lastName email phone')
      .lean() as any;
    
    if (!order) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }

    // Check if user has access to this order
    const session = await auth();
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Allow access if user owns the order or is admin
    const isOwner = order.customer && (order.customer as any)._id.toString() === session.user.id;
    const isAdmin = ['admin', 'manager', 'staff'].includes((session.user as any).role);
    
    if (!isOwner && !isAdmin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Trigger invoice generation if not exists
    if (!order.invoicePath) {
      try {
        // Import queue service dynamically
        const { default: queueService, JobType } = await import('@/lib/queue');
        
        // Queue invoice generation job
        const jobId = await queueService.enqueue({
          type: JobType.GENERATE_INVOICE,
          orderId: order._id.toString(),
          orderData: order
        } as any);

        return NextResponse.json({
          message: 'Invoice generation queued',
          orderNumber: order.orderNumber,
          jobId
        });
      } catch (error) {
        console.error('Failed to queue invoice generation:', error);
        return NextResponse.json({ 
          error: 'Failed to queue invoice generation' 
        }, { status: 500 });
      }
    }

    return NextResponse.json({
      message: 'Invoice already exists',
      invoicePath: order.invoicePath
    });

  } catch (error) {
    console.error('Trigger invoice generation error:', error);
    return NextResponse.json({ error: 'Failed to trigger invoice generation' }, { status: 500 });
  }
}